### Get all companies
GET http://localhost:8080/companies
Accept: application/json

> {%
    client.test("Response code is 200 OK", () => client.assert(response.status === 200));
    client.test("Offers are returned", () => client.assert(jsonPath(response.body, "$.companies").length > 0));
    client.global.set("firstCompanyId", jsonPath(response.body, "$.companies[0].id"));
%}


### Get company by id
GET http://localhost:8080/companies/{{firstCompanyId}}
Accept: application/json

> {%
    client.test(`Response code is 200 OK`,()=>client.assert(response.status===200))
    client.test(`Offer is returned`,()=>client.assert(
        jsonPath(response.body,"$.id")==client.global.get("firstCompanyId")
    ))
    client.global.set("firstCompanyEmployeeId",jsonPath(response.body,"$.employees[0].id"))
%}


### Add company
PUT http://localhost:8080/companies
Content-Type: application/json

{
  "name": "testCompany",
  "capitalization": 300
}

> {%
    client.test(`Response code is 201 CREATED`,()=>client.assert(response.status===201))
    client.global.set("addedCompanyId",jsonPath(response.body,"$.id"))
%}


### Update company
PATCH http://localhost:8080/companies/{{addedCompanyId}}
Content-Type: application/json

{
  "name": "updatedTestCompany",
  "capitalization": 400
}

> {%
    client.test(`Response code is 202 Accepted`,()=>client.assert(response.status===202))
    client.test(`Company is updated`,()=>client.assert(
        jsonPath(response.body,"$.name")=="updatedTestCompany"&&
        jsonPath(response.body,"$.capitalization")==400
    ))
%}

### Delete company
DELETE http://localhost:8080/companies/{{addedCompanyId}}
Accept: application/json

> {%
    client.test(`Response code is 204 NO CONTENT`,()=>client.assert(response.status===204))
%}

